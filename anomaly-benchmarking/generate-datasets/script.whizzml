;; Takes a map of bin labels and max edges, and returns a sorted list
;; of maps

(define (map-to-list edges-map)
  (let (labels (keys edges-map)
        edges-list (map (lambda (x) (make-map ["level" "max"] 
                                              [x (edges-map x)]))
                     labels))
    (sort-by-key "max" edges-list)))

;; Takes a dataset, returns the same dataset with all fields marked preferred

(define (all-preferred ds-id)
  (let (ds (fetch ds-id)
        field-list (keys (ds "fields")))
    (update ds-id 
            {"fields" (make-map field-list (repeat (count field-list) 
                                                   {"preferred" true}))})))

;; Given a dataset and a field name, returns the field id with that name

(define (get-id ds name)
  (let (fields (ds "fields"))
    (try
      (head (filter (lambda (x) (= (fields [x "name"]) name)) 
                    (keys fields)))
      (catch e
        (log-warn "Could not find field name " name " : " e)))))

;; Given a binary dataset, finds the point difficulty of each row and
;; returns a dataset of only anomalous points and a new field
;; labeling each row by one of four difficulty levels.

(define (point-difficulty ds-id new-obj delete-resources diff-list)
  (let (ds (all-preferred ds-id)
        lr-id (create-and-wait-logisticregression ds)
        pred-name (str "prediction for " 
                       ((fetch ds) ["objective_field" "name"]))
        bp-id (wait (create-batchprediction lr-id 
                                            ds 
                                            {"probabilities" true 
                                             "output_dataset" true 
                                             "all_fields" true 
                                             "prediction_name" pred-name}))
        prob-ds-id ((fetch bp-id) "output_dataset_resource")
        prob-ds (fetch (wait prob-ds-id))
        pred-field (get-id prob-ds pred-name)
        norm-field (get-id prob-ds "normal probability")
        ano-field (get-id prob-ds "anomalous probability")
        other-bins (butlast diff-list)
        last-bin ((last diff-list) "level")
        my-bins (reduce (lambda (x y) 
                          (str x "\"" (y "level") "\" " (y "max") " "))
                        ""
                        other-bins)
        diff-sort (flatline "(segment-label {{norm-field}}"
                            "               {my-bins}"
                            "               {{last-bin}})") 
        my-filter (flatline "(= (field {{new-obj}}) \"anomalous\")")
        diff-ds (wait (create-dataset prob-ds-id 
                                      {"lisp_filter" my-filter
                                       "new_fields" [{"field" diff-sort
                                                      "name" "sorted"}]
                                       "all_but" [norm-field 
                                                  ano-field 
                                                  pred-field]})))
    (when delete-resources
      (map safe-delete [lr-id bp-id prob-ds-id]))
    diff-ds))

;; Takes a dataset labeled by point-difficulty, and splits the dataset
;; into one of four new datasets based on their label. Returns the
;; list of these new datasets.

(define (split-difficulty ds-id diff-list)
  (let (ds (fetch ds-id)
        split-field (get-id ds "sorted")
        split-list (ds ["fields" split-field "summary" "categories"]) 
        split-map (make-map (map head split-list)(map last split-list))
        split-it (lambda (level)
                   (let (my-filter (flatline "(= (f {{split-field}})"
                                             " "
                                             "      {{level}})"))
                     (if (contains? split-map level) 
                       (wait (create-dataset {"origin_dataset" ds-id
                                              "lisp_filter" my-filter
                                              "excluded_fields" [split-field]
                                              "name" (str level " diff")
                                              "tags" [level]}))
                       false))))
    (map split-it (map (lambda (x) (x "level")) diff-list))))

;; Takes a dataset and creates two datasets, one from the lowest
;; anomaly scores and one from the highest. Returns a list of the
;; dataset ids.

(define (semantic-variation ds-id obj-field delete-resources)
  (let (ds (fetch ds-id)
        ds-name (ds "name")
        ad-id (create-anomaly {"dataset" ds-id
                               "id_fields" [obj-field]})
        bas-id (create-batchanomalyscore {"anomaly" ad-id
                                          "dataset" ds-id
                                          "all_fields" true
                                          "output_dataset" true})
        score-ds ((fetch (wait bas-id)) "output_dataset_resource")
        id (get-id (fetch (wait score-ds)) "score")
        score-low (flatline "(within-percentiles? {{id}} 0 0.2)")
        score-high (flatline "(within-percentiles? {{id}} 0.8 1)")
        low-ds (create-and-wait-dataset {"origin_dataset" score-ds
                                         "lisp_filter" score-low
                                         "name" (str ds-name 
                                                     " - high clusteredness")
                                         "excluded_fields" [id]})
        high-ds (create-and-wait-dataset {"origin_dataset" score-ds
                                          "lisp_filter" score-high
                                          "name" (str ds-name 
                                                      " - low clusteredness")
                                          "excluded_fields" [id]}))
    (when delete-resources
      (map safe-delete [ad-id bas-id score-ds]))
    [low-ds high-ds]))

;; Takes two datasets, one normal and one anomalous. Finds the
;; variance of each dataset, calculates the ratio of normal variance
;; to anomalous variance, sorts the ratio into one of six categories,
;; and tags the anomalous dataset with that category. The variance is
;; found by abusing k-means; it creates just one cluster which contains
;; all the data.

(define (variance-ratios ano-ds-id 
                         norm-var 
                         norm-scales 
                         delete-resources 
                         var-list)
  (let (ano-ds (fetch ano-ds-id)
        my-tags (ano-ds "tags")
        ano-cl-id (create-and-wait-cluster {"dataset" ano-ds-id 
                                            "k" 1 
                                            "balance_fields" false 
                                            "field_scales" norm-scales})
        ano-var ((fetch ano-cl-id) ["clusters"
                                    "global"
                                    "distance"
                                    "standard_deviation"])
        my-ratio (pow (/ norm-var ano-var) 2)
        new-tag (loop (x (head var-list) rest (tail var-list))
                  (cond (empty? rest) (x "level")
                        (< my-ratio (x "max")) (x "level")
                        (recur (head rest) (tail rest)))))
    (when delete-resources
      (map safe-delete [ano-cl-id]))
    (update ano-ds-id {"tags" (append my-tags new-tag)})))

;; Takes a dataset. Determines which relative frequencies are
;; possible. Generates the max possible datasets (limit 10 by default)
;; at those frequencies. Returns a list of datasets.

(define (relative-frequency ds-id normal-rows replicates freq-list)
  (let (ds (fetch ds-id)
        rows (ds "rows")
        ds-name (ds "name")
        my-tags (ds "tags")
        max-freq (/ rows (+ rows normal-rows)))
    (for (freq freq-list)
      (try
        (let (k (/ (* freq normal-rows) (- 1 freq)))
          (when (and (> max-freq freq) (> k 10))
            (repeatedly (min replicates (floor (/ rows k))) 
                        (lambda () (create-dataset {"origin_dataset" ds-id
                                                    "sample_rate" (/ k rows)
                                                    "name" (str ds-name 
                                                                " - " 
                                                                freq)
                                                    "tags" (append my-tags 
                                                                   (str freq))})))))
        (catch e
          (log-error "Could not use frequency " freq ": " e))))))
  
;; Given an anomalous dataset and a normal dataset, combines them into
;; a single dataset, and returns a map with key/value pairs from the
;; tags from the anomalous dataset (difficulty, frequency, and
;; variation) and the combined dataset (resource)

(define (generate-map ds-id normal-ds)
  (let (ds (fetch ds-id)
        combined (create-dataset {"origin_datasets" [ds-id normal-ds]}) 
        my-tags (ds "tags"))
    (make-map ["difficulty" "frequency" "variation"  "resource"] 
              (append my-tags combined))))

;; Putting it all together. This function takes a dataset, makes the
;; dataset binary using the make-binary library, and splits it into
;; parts by point-difficulty, creates a high and low clusteredness for
;; each part, and generates as many frequencies as possible for each
;; clusteredness. Returns a list of maps for all the datasets created,
;; specifying the resource id, difficulty, semantic variation, and
;; frequency.

(define (generate ds-id 
                  diff-map 
                  var-map 
                  freq-list 
                  replicates 
                  delete-resources)
  (let (diff-list (map-to-list diff-map)
        var-list (map-to-list var-map)
        old-obj ((fetch ds-id) ["objective_field" "id"])
        binary (make-binary ds-id old-obj delete-resources)
        new-obj ((fetch binary) ["objective_field" "id"])
        norm-filter (flatline "(= (field {{new-obj}}) \"normal\")")
        normal-ds (create-and-wait-dataset {"origin_dataset" binary
                                            "lisp_filter" norm-filter
                                            "name" "normal"})
        normal-rows ((fetch normal-ds) "rows")
        norm-cl-id (create-and-wait-cluster {"dataset" normal-ds "k" 1})
        norm-cl (fetch norm-cl-id)
        norm-var (norm-cl ["clusters" 
                           "global" 
                           "distance" 
                           "standard_deviation"])
        norm-scales (norm-cl "scales")
        diff-ds (point-difficulty binary new-obj delete-resources diff-list)
        difficulty-list (filter (lambda (x) x) 
                                (split-difficulty diff-ds diff-list))
        variation-list (flatten [] 
                                (for (x difficulty-list)
                                  (when x 
                                    (semantic-variation x 
                                                        new-obj 
                                                        delete-resources)))) 
        frequency-list (flatten []
                                (for (x variation-list)
                                  (when x 
                                    (relative-frequency x 
                                                        normal-rows 
                                                        replicates 
                                                        freq-list))))
        labeled-by-variation (for (x frequency-list)
                               (when x 
                                 (variance-ratios x 
                                                  norm-var 
                                                  norm-scales 
                                                  delete-resources
                                                  var-list))) 
        final-list (for (x labeled-by-variation)
                     (if x (generate-map x normal-ds))))
    (when delete-resources
      (map safe-delete (flatten [] [binary
                                    normal-ds
                                    norm-cl-id
                                    diff-ds 
                                    difficulty-list 
                                    variation-list
                                    frequency-list])))
    (filter (lambda (x) x) final-list)))

(define generated-datasets
  (for (x dataset-list) (generate x 
                                  difficulty-map 
                                  variance-map 
                                  frequency-list 
                                  replicates 
                                  delete-resources)))
